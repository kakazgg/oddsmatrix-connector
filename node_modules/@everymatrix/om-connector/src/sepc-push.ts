import TCPConnector from './tcp/tcp-connector/tcp-connector';
import {
    initHandlers as tcpEmitterInitHandlers,
    removeHandlers as tcpEmitterRemoveHandlers,
    tcpEmitter,
} from './tcp/tcp-emitter/tcp-emitter';
import { CommonEvents, TCPEvents } from './constants/eventNames';
import { InitialData, UpdateData } from './core/messages.types';
import log from './core/log';

export default abstract class SEPCPushConnector {
    tcpConnector: TCPConnector | null;

    protected constructor(public host: string, public port: string) {
    }

    start = async (subscriptionSpecificationName: string): Promise<void> => {
        tcpEmitterInitHandlers();

        this.tcpConnector = new TCPConnector(this.host, this.port, subscriptionSpecificationName, this.getLastAppliedEntityChangeBatchUuid.bind(this));

        tcpEmitter.on(TCPEvents.notifyInitialDump, (initialData: InitialData): void => this.notifyInitialDump(initialData));

        tcpEmitter.on(TCPEvents.notifyEntityUpdates, (updateData: UpdateData): void => this.notifyEntityUpdates(updateData));

        try {
            await this.tcpConnector.connect();
        } catch (e) {
            log(e);
            tcpEmitter.emit(CommonEvents.runtimeError, e);
            await this.stop();
        }
    }

    stop = async (): Promise<void> => {
        if (this.tcpConnector) {
            await this.tcpConnector.disconnect();
            this.tcpConnector = null;
        }
        tcpEmitterRemoveHandlers();
    }

    abstract getLastAppliedEntityChangeBatchUuid(): string;

    abstract notifyInitialDump(entities: InitialData): void;

    abstract notifyEntityUpdates(entities: UpdateData): void;
}
