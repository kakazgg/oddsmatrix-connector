import { gzip } from 'zlib';
import { MessageRequest } from '../core/messages.types';
import { tcpEmitter } from './tcp-emitter/tcp-emitter';
import { CommonEvents } from '../constants/eventNames';

export function getGzipPromise(content: string): Promise<Buffer> {
    return new Promise((resolve, reject) => {
        gzip(content, (err: Error | null, gzipped: Buffer) => {
            if (err) {
                tcpEmitter.emit(CommonEvents.runtimeError, err);
                reject(err);
            } else {
                resolve(gzipped);
            }
        });
    });
}

function getMessage(requestMeta: MessageRequest): Promise<Buffer> {
    return getGzipPromise(JSON.stringify(requestMeta));
}

export function getSubscriptionMessage(subscriptionName: string): Promise<Buffer> {
    return getMessage({
        SubscribeRequest: {
            subscriptionSpecificationName: subscriptionName,
        },
    });
}

export function getPingResponse(id: string): Promise<Buffer> {
    return getMessage({
        PingResponse: {
            id,
        },
    });
}

export function getUnsubscribeRequest(subscriptionId: string, subscriptionSpecificationName: string): Promise<Buffer> {
    return getMessage({
        UnsubscribeRequest: {
            subscriptionId,
            subscriptionSpecificationName,
        },
    });
}

export function getUpdateDataResumeRequest(
    subscriptionId: string,
    subscriptionSpecificationName: string,
    subscriptionChecksum: string,
    lastBatchUuid: string,
): Promise<Buffer> {
    return getMessage({
        UpdateDataResumeRequest: {
            subscriptionId,
            subscriptionSpecificationName,
            subscriptionChecksum,
            lastBatchUuid,
        },
    });
}
