import { SportEngineParserClass } from './sports-engine-parser.types';
import { tcpEmitter } from '../tcp-emitter/tcp-emitter';
import { CommonEvents, TCPEvents } from '../../constants/eventNames';
import { bufferFrom } from '../../utils';

const ZERO_BIT_LENGTH: number = 1;
const SEPARATOR: 0 = 0;

class SportEngineParser implements SportEngineParserClass {
    unparsed: Buffer[] = [];

    drain(): void {
        this.unparsed = [];
    }

    static getZeroBitIndex(data: Buffer): number {
        return data.indexOf(SEPARATOR);
    }

    static getContentLength(data: Buffer, zeroBitIndex: number): number {
        const contentLengthBuff: Buffer = data.slice(0, zeroBitIndex);
        return parseInt(contentLengthBuff.toString('ascii'), 10);
    }

    destroy(): void {
        this.drain();
    }

    parse(data: Buffer): void {
        const { unparsed } = this;

        unparsed.push(data);

        const unparsedBuffer = bufferFrom(unparsed);
        const zeroBitIndex = SportEngineParser.getZeroBitIndex(unparsedBuffer);

        if (zeroBitIndex === -1) {
            return;
        }

        const contentLength = SportEngineParser.getContentLength(unparsedBuffer, zeroBitIndex);
        const contentStartPosition = zeroBitIndex + ZERO_BIT_LENGTH;

        if (contentLength) {
            const neededBufferLength = contentStartPosition + contentLength;

            if (unparsedBuffer.length >= neededBufferLength) {
                const noLengthData = unparsedBuffer.slice(contentStartPosition);
                const content = noLengthData.slice(0, contentLength);
                const remainingPart = noLengthData.slice(contentLength);

                tcpEmitter.emit(TCPEvents.jsonReceived, content);

                this.drain();

                if (remainingPart.length) {
                    this.parse(remainingPart);
                }
            }
        } else {
            tcpEmitter.emit(CommonEvents.runtimeError, new Error(`Can't parse chunk content length as number. Got ${contentLength}`));
        }
    }
}

export default new SportEngineParser();
