import { EventEmitter } from 'events';
import { CommonEvents, TCPEvents } from '../../constants/eventNames';
import {
    isError, isInitialData, isPing, isSubscribeResponse, isUnsubscribeResponse, isUpdateData,
} from '../tcp.utils';
import log from '../../core/log';
import { serialGunzipGenerator } from '../../utils';

export const tcpEmitter: EventEmitter = new EventEmitter();

export function listenTo(event: CommonEvents, cb: (e: string) => void) {
    tcpEmitter.on(event, cb);
}

export function initHandlers(): void {
    const serialGunzip = serialGunzipGenerator();

    tcpEmitter.on(TCPEvents.jsonReceived, async (gzippedMessage): Promise<void> => {
        try {
            const unzippedMessage = await serialGunzip(gzippedMessage);
            tcpEmitter.emit(TCPEvents.jsonUnzipped, unzippedMessage.toString());
        } catch (e) {
            tcpEmitter.emit(CommonEvents.runtimeError, e);
        }
    });

    tcpEmitter.on(TCPEvents.jsonUnzipped, (rawJSON: string): void => {
        const parsedMessage = JSON.parse(rawJSON);

        if (isPing(parsedMessage)) {
            const { id } = parsedMessage.PingRequest;
            log(`Ping id: ${id}`);
            tcpEmitter.emit(TCPEvents.ping, id);
        }

        if (isSubscribeResponse(parsedMessage)) {
            const { subscriptionId, subscriptionChecksum } = parsedMessage.SubscribeResponse;
            log(`Subscription received: ${subscriptionId} ${subscriptionChecksum}`);
            tcpEmitter.emit(TCPEvents.subscribe, parsedMessage);
        }

        if (isInitialData(parsedMessage)) {
            tcpEmitter.emit(TCPEvents.notifyInitialDump, parsedMessage.InitialData);
        }

        if (isUpdateData(parsedMessage)) {
            tcpEmitter.emit(TCPEvents.notifyEntityUpdates, parsedMessage.UpdateData);
        }

        if (isError(parsedMessage)) {
            const { code, message } = parsedMessage.error;
            log(`Error received: ${code} ${message}`);
            tcpEmitter.emit(TCPEvents.tcpError, parsedMessage.error);
        }

        if (isUnsubscribeResponse(parsedMessage)) {
            const { code, message } = parsedMessage.UnsubscribeResponse;
            if (code) {
                log(`Unsubscribe error: ${code} ${message}`);
            } else {
                log('Unsubscribed succesfully');
            }
            tcpEmitter.emit(TCPEvents.unsubscribe, parsedMessage.UnsubscribeResponse);
        }
    });
}

export function removeHandlers(): void {
    tcpEmitter.removeAllListeners();
}
