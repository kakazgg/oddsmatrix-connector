import { stringify } from 'querystring';
import fetch, { Response } from 'node-fetch';
import { CommonEvents, HTTPEvents } from '../constants/eventNames';
import { HttpConnectionState, HTTPFlowEvents, RequestTypes } from './http.utils';
import { httpEmitter } from './http-emitter';
import log from '../core/log';

export default class HTTPConnector {
    nextScheduledRequestId: NodeJS.Timeout;

    updateInterval: number;

    connectionState: HttpConnectionState = {
        currentStage: RequestTypes.subscribe,
        nextRequestInterval: 0,
    };

    constructor(public host: string, public port: string) {
    }

    setState(newState: Partial<HttpConnectionState>): void {
        this.connectionState = {
            ...this.connectionState,
            ...newState,
        };
    }

    getQueryParams(): string {
        const {
            currentStage: requestType,
            subscriptionId,
            subscriptionSpecificationName,
        } = this.connectionState;

        switch (requestType) {
            case RequestTypes.subscribe: {
                return stringify({
                    requestType,
                    subscriptionSpecificationName,
                });
            }

            case RequestTypes.nextInitialData: {
                return stringify({
                    requestType,
                    subscriptionId,
                });
            }

            case RequestTypes.nextUpdateData: {
                return stringify({
                    requestType,
                    subscriptionId,
                });
            }

            case RequestTypes.unsubscribe: {
                return stringify({
                    requestType,
                    subscriptionId,
                    subscriptionSpecificationName,
                });
            }

            default:
                return '';
        }
    }

    async nextRequest(): Promise<void> {
        const params: string = this.getQueryParams();
        const url: string = `${this.host}:${this.port}/jsonfeed?${params}`;

        try {
            const response: Response = await fetch(url);
            const dataBuffer: Buffer = await response.buffer();

            httpEmitter.emit(HTTPEvents.jsonReceived, dataBuffer);
        } catch (e) {
            httpEmitter.emit(HTTPEvents.reconnect);
            log(e);
            throw e;
        }
    }

    async connect(subscriptionSpecificationName: string, updateInterval: number): Promise<void> {
        this.setState({
            subscriptionSpecificationName,
            nextRequestInterval: 0,
        });

        this.updateInterval = updateInterval;

        httpEmitter.on(HTTPEvents.nextRequest, (): void => {
            this.nextScheduledRequestId = setTimeout(() => this.nextRequest(), this.connectionState.nextRequestInterval);
        });

        httpEmitter.on(HTTPEvents.reconnect, async (): Promise<void> => {
            clearTimeout(this.nextScheduledRequestId);
            this.setState({ currentStage: RequestTypes.unsubscribe, nextRequestInterval: 0 });

            try {
                await this.nextRequest();
                this.setState({ currentStage: RequestTypes.subscribe, nextRequestInterval: 0 });
            } catch (e) {
                httpEmitter.emit(CommonEvents.runtimeError, e);
            }
        });

        httpEmitter.on(HTTPFlowEvents.subscriptionIdSet, (subscriptionId: string): void => {
            this.setState({
                currentStage: RequestTypes.nextInitialData,
                subscriptionId,
            });
        });

        httpEmitter.on(HTTPFlowEvents.dumpCompleted, (): void => {
            this.setState({
                currentStage: RequestTypes.nextUpdateData,
                nextRequestInterval: updateInterval,
            });
        });

        await this.nextRequest();
    }

    async disconnect(): Promise<void> {
        if (this.nextScheduledRequestId) {
            clearTimeout(this.nextScheduledRequestId);
        }

        this.setState({ currentStage: RequestTypes.unsubscribe });

        await this.nextRequest();

        this.setState({ currentStage: RequestTypes.subscribe });
    }
}
