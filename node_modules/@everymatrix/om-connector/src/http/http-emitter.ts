import { EventEmitter } from 'events';
import {
    HTTPFlowEvents,
    isError,
    isInitialData,
    isSubscribeResponse,
    isUpdateData,
} from './http.utils';
import { CommonEvents, HTTPEvents } from '../constants/eventNames';
import { ApiErrorCodes, SerialGunzip, serialGunzipGenerator } from '../utils';
import { MessageEntity } from '../core/messages.types';

export const httpEmitter: EventEmitter = new EventEmitter();

export function listenTo(event: CommonEvents, cb: (e: string) => void) {
    httpEmitter.on(event, cb);
}

export function initHandlers(): void {
    const serialGunzip: SerialGunzip = serialGunzipGenerator();

    httpEmitter.on(HTTPEvents.jsonReceived, async (gzippedJSON: Buffer) => {
        try {
            const rawJSON: Buffer = await serialGunzip(gzippedJSON);
            httpEmitter.emit(HTTPEvents.jsonUnzipped, rawJSON.toString());
        } catch (e) {
            httpEmitter.emit(CommonEvents.runtimeError, e);
        }
    });

    httpEmitter.on(HTTPEvents.jsonUnzipped, (rawJSON: string): void => {
        const parsedMessage: MessageEntity = JSON.parse(rawJSON);

        if (isSubscribeResponse(parsedMessage)) {
            const { subscriptionId } = parsedMessage.SubscribeResponse;
            httpEmitter.emit(HTTPFlowEvents.subscriptionIdSet, subscriptionId);
        }

        if (isInitialData(parsedMessage)) {
            const { InitialData } = parsedMessage.GetNextInitialDataResponse;
            const { dumpComplete } = InitialData[0];

            if (dumpComplete) {
                httpEmitter.emit(HTTPFlowEvents.dumpCompleted);
            }

            httpEmitter.emit(HTTPEvents.notifyInitialDump, InitialData[0]);
        }

        if (isUpdateData(parsedMessage)) {
            const { UpdateData } = parsedMessage.GetNextUpdateDataResponse;
            httpEmitter.emit(HTTPEvents.notifyEntityUpdates, UpdateData);
        }

        if (isError(parsedMessage)) {
            const { code } = parsedMessage.error;

            httpEmitter.emit(HTTPEvents.httpError, parsedMessage.error);

            if (code === ApiErrorCodes.InternalServer) {
                httpEmitter.emit(HTTPEvents.reconnect);
            }

            return;
        }

        httpEmitter.emit(HTTPEvents.nextRequest);
    });
}

export function removeHandlers(): void {
    httpEmitter.removeAllListeners();
}
