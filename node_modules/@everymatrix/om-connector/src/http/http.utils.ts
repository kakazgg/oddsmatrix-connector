import {
    ErrorResponse,
    GetNextInitialDataResponse,
    GetNextUpdateDataResponse,
    MessageEntity,
    SubscribeResponse,
    UnsubscribeResponse,
} from '../core/messages.types';
import isEntity from '../core/is-entity';

export interface HttpConnectionState {
    nextRequestInterval: number;
    subscriptionSpecificationName?: string;
    subscriptionId?: string;
    dumpCompleted?: boolean;
    currentStage: RequestTypes;
}

export enum RequestTypes {
    subscribe = 'SubscribeRequest',
    nextInitialData = 'GetNextInitialDataRequest',
    nextUpdateData = 'GetNextUpdateDataRequest',
    unsubscribe = 'UnsubscribeRequest',
}

export enum HTTPFlowEvents {
    subscriptionIdSet = 'subscriptionIdSet',
    dumpCompleted = 'dumpCompleted',
}

export function isSubscribeResponse(data: MessageEntity): data is SubscribeResponse {
    return isEntity(data, 'SubscribeResponse');
}

export function isUnsubscribeResponse(data: MessageEntity): data is UnsubscribeResponse {
    return isEntity(data, 'UnsubscribeResponse');
}

export function isInitialData(data: MessageEntity): data is GetNextInitialDataResponse {
    return isEntity(data, 'GetNextInitialDataResponse');
}

export function isUpdateData(data: MessageEntity): data is GetNextUpdateDataResponse {
    return isEntity(data, 'GetNextUpdateDataResponse');
}

export function isError(data: MessageEntity): data is ErrorResponse {
    return isEntity(data, 'error');
}
