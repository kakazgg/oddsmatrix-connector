"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiErrorCodes = exports.serialGunzipGenerator = exports.wrapErrorCallback = exports.onProcessExit = exports.toggleDebugMode = exports.isDebugMode = exports.bufferFrom = exports.getSumOfArraysLength = void 0;
var zlib_1 = require("zlib");
exports.getSumOfArraysLength = function (twoDArray) { return twoDArray.reduce(function (memo, item) { return (memo + item.length); }, 0); };
function bufferFrom(items) {
    var itemsLength = exports.getSumOfArraysLength(items);
    var offset = 0;
    var end = 0;
    var finalBuffer = Buffer.alloc(itemsLength);
    items.forEach(function (item) {
        finalBuffer.fill(item, offset, end += item.length);
        offset += item.length;
    });
    return finalBuffer;
}
exports.bufferFrom = bufferFrom;
exports.isDebugMode = function () { return process.env.DEBBUG_CONNECTOR === true.toString(); };
exports.toggleDebugMode = function (toggle) {
    process.env.DEBBUG_CONNECTOR = toggle;
};
function onProcessExit(fn) {
    ['exit', 'SIGINT', 'SIGUSR1', 'SIGUSR2', 'uncaughtException', 'SIGTERM'].forEach(function (eventType) {
        process.on(eventType, fn);
    });
}
exports.onProcessExit = onProcessExit;
function wrapErrorCallback(resolve, reject) {
    return function (err) {
        if (err) {
            reject();
        }
        resolve();
    };
}
exports.wrapErrorCallback = wrapErrorCallback;
function gunzipAsPromise(buffer, options) {
    if (options === void 0) { options = {}; }
    return new Promise(function (resolve, reject) { return zlib_1.gunzip(buffer, options, function (err, unzipped) {
        if (err) {
            return reject(err);
        }
        return resolve(unzipped);
    }); });
}
function serialGunzipGenerator() {
    var lastPromise;
    return function (buffer, options) {
        lastPromise = lastPromise
            ? lastPromise.then(function () { return gunzipAsPromise(buffer, options); })
            : gunzipAsPromise(buffer, options);
        return lastPromise;
    };
}
exports.serialGunzipGenerator = serialGunzipGenerator;
var ApiErrorCodes;
(function (ApiErrorCodes) {
    ApiErrorCodes["InvalidRequest"] = "100";
    ApiErrorCodes["IOCommunication"] = "200";
    ApiErrorCodes["TooManyActiveSubscriptions"] = "300";
    ApiErrorCodes["SubscribeTooOften"] = "301";
    ApiErrorCodes["GetNextInitialDataTooOften"] = "304";
    ApiErrorCodes["GetNextUpdateDataTooOften"] = "305";
    ApiErrorCodes["UpdateDataResumeTooOften"] = "400";
    ApiErrorCodes["InternalServer"] = "1000";
})(ApiErrorCodes = exports.ApiErrorCodes || (exports.ApiErrorCodes = {}));
