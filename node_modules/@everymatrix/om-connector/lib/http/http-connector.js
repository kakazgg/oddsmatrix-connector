"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var querystring_1 = require("querystring");
var node_fetch_1 = require("node-fetch");
var eventNames_1 = require("../constants/eventNames");
var http_utils_1 = require("./http.utils");
var http_emitter_1 = require("./http-emitter");
var log_1 = require("../core/log");
var HTTPConnector = (function () {
    function HTTPConnector(host, port) {
        this.host = host;
        this.port = port;
        this.connectionState = {
            currentStage: http_utils_1.RequestTypes.subscribe,
            nextRequestInterval: 0,
        };
    }
    HTTPConnector.prototype.setState = function (newState) {
        this.connectionState = __assign(__assign({}, this.connectionState), newState);
    };
    HTTPConnector.prototype.getQueryParams = function () {
        var _a = this.connectionState, requestType = _a.currentStage, subscriptionId = _a.subscriptionId, subscriptionSpecificationName = _a.subscriptionSpecificationName;
        switch (requestType) {
            case http_utils_1.RequestTypes.subscribe: {
                return querystring_1.stringify({
                    requestType: requestType,
                    subscriptionSpecificationName: subscriptionSpecificationName,
                });
            }
            case http_utils_1.RequestTypes.nextInitialData: {
                return querystring_1.stringify({
                    requestType: requestType,
                    subscriptionId: subscriptionId,
                });
            }
            case http_utils_1.RequestTypes.nextUpdateData: {
                return querystring_1.stringify({
                    requestType: requestType,
                    subscriptionId: subscriptionId,
                });
            }
            case http_utils_1.RequestTypes.unsubscribe: {
                return querystring_1.stringify({
                    requestType: requestType,
                    subscriptionId: subscriptionId,
                    subscriptionSpecificationName: subscriptionSpecificationName,
                });
            }
            default:
                return '';
        }
    };
    HTTPConnector.prototype.nextRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var params, url, response, dataBuffer, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = this.getQueryParams();
                        url = this.host + ":" + this.port + "/jsonfeed?" + params;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4, node_fetch_1.default(url)];
                    case 2:
                        response = _a.sent();
                        return [4, response.buffer()];
                    case 3:
                        dataBuffer = _a.sent();
                        http_emitter_1.httpEmitter.emit(eventNames_1.HTTPEvents.jsonReceived, dataBuffer);
                        return [3, 5];
                    case 4:
                        e_1 = _a.sent();
                        http_emitter_1.httpEmitter.emit(eventNames_1.HTTPEvents.reconnect);
                        log_1.default(e_1);
                        throw e_1;
                    case 5: return [2];
                }
            });
        });
    };
    HTTPConnector.prototype.connect = function (subscriptionSpecificationName, updateInterval) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.setState({
                            subscriptionSpecificationName: subscriptionSpecificationName,
                            nextRequestInterval: 0,
                        });
                        this.updateInterval = updateInterval;
                        http_emitter_1.httpEmitter.on(eventNames_1.HTTPEvents.nextRequest, function () {
                            _this.nextScheduledRequestId = setTimeout(function () { return _this.nextRequest(); }, _this.connectionState.nextRequestInterval);
                        });
                        http_emitter_1.httpEmitter.on(eventNames_1.HTTPEvents.reconnect, function () { return __awaiter(_this, void 0, void 0, function () {
                            var e_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        clearTimeout(this.nextScheduledRequestId);
                                        this.setState({ currentStage: http_utils_1.RequestTypes.unsubscribe, nextRequestInterval: 0 });
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4, this.nextRequest()];
                                    case 2:
                                        _a.sent();
                                        this.setState({ currentStage: http_utils_1.RequestTypes.subscribe, nextRequestInterval: 0 });
                                        return [3, 4];
                                    case 3:
                                        e_2 = _a.sent();
                                        http_emitter_1.httpEmitter.emit(eventNames_1.CommonEvents.runtimeError, e_2);
                                        return [3, 4];
                                    case 4: return [2];
                                }
                            });
                        }); });
                        http_emitter_1.httpEmitter.on(http_utils_1.HTTPFlowEvents.subscriptionIdSet, function (subscriptionId) {
                            _this.setState({
                                currentStage: http_utils_1.RequestTypes.nextInitialData,
                                subscriptionId: subscriptionId,
                            });
                        });
                        http_emitter_1.httpEmitter.on(http_utils_1.HTTPFlowEvents.dumpCompleted, function () {
                            _this.setState({
                                currentStage: http_utils_1.RequestTypes.nextUpdateData,
                                nextRequestInterval: updateInterval,
                            });
                        });
                        return [4, this.nextRequest()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    HTTPConnector.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.nextScheduledRequestId) {
                            clearTimeout(this.nextScheduledRequestId);
                        }
                        this.setState({ currentStage: http_utils_1.RequestTypes.unsubscribe });
                        return [4, this.nextRequest()];
                    case 1:
                        _a.sent();
                        this.setState({ currentStage: http_utils_1.RequestTypes.subscribe });
                        return [2];
                }
            });
        });
    };
    return HTTPConnector;
}());
exports.default = HTTPConnector;
