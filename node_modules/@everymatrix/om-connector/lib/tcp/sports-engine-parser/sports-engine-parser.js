"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tcp_emitter_1 = require("../tcp-emitter/tcp-emitter");
var eventNames_1 = require("../../constants/eventNames");
var utils_1 = require("../../utils");
var ZERO_BIT_LENGTH = 1;
var SEPARATOR = 0;
var SportEngineParser = (function () {
    function SportEngineParser() {
        this.unparsed = [];
    }
    SportEngineParser.prototype.drain = function () {
        this.unparsed = [];
    };
    SportEngineParser.getZeroBitIndex = function (data) {
        return data.indexOf(SEPARATOR);
    };
    SportEngineParser.getContentLength = function (data, zeroBitIndex) {
        var contentLengthBuff = data.slice(0, zeroBitIndex);
        return parseInt(contentLengthBuff.toString('ascii'), 10);
    };
    SportEngineParser.prototype.destroy = function () {
        this.drain();
    };
    SportEngineParser.prototype.parse = function (data) {
        var unparsed = this.unparsed;
        unparsed.push(data);
        var unparsedBuffer = utils_1.bufferFrom(unparsed);
        var zeroBitIndex = SportEngineParser.getZeroBitIndex(unparsedBuffer);
        if (zeroBitIndex === -1) {
            return;
        }
        var contentLength = SportEngineParser.getContentLength(unparsedBuffer, zeroBitIndex);
        var contentStartPosition = zeroBitIndex + ZERO_BIT_LENGTH;
        if (contentLength) {
            var neededBufferLength = contentStartPosition + contentLength;
            if (unparsedBuffer.length >= neededBufferLength) {
                var noLengthData = unparsedBuffer.slice(contentStartPosition);
                var content = noLengthData.slice(0, contentLength);
                var remainingPart = noLengthData.slice(contentLength);
                tcp_emitter_1.tcpEmitter.emit(eventNames_1.TCPEvents.jsonReceived, content);
                this.drain();
                if (remainingPart.length) {
                    this.parse(remainingPart);
                }
            }
        }
        else {
            tcp_emitter_1.tcpEmitter.emit(eventNames_1.CommonEvents.runtimeError, new Error("Can't parse chunk content length as number. Got " + contentLength));
        }
    };
    return SportEngineParser;
}());
exports.default = new SportEngineParser();
