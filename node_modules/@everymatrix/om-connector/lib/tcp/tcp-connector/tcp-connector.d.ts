/// <reference types="node" />
import { Socket } from 'net';
import { ConnectOptions, TCPConnectorClass, TCPConnectorState } from './tcp-connector.types';
export default class TCPConnector implements TCPConnectorClass {
    client: Socket | null;
    host: string;
    port: string;
    subscriptionSpecificationName: string;
    subscriptionId: string;
    subscriptionChecksum: string;
    state: TCPConnectorState;
    reconnectAttempt: number;
    getLastAppliedEntityChangeBatchUuid: () => string;
    constructor(host: string, port: string, subscriptionSpecificationName: string, getLastAppliedEntityChangeBatchUuid: () => string);
    connect(sendSubscriptionProbe?: boolean, options?: {
        keepAlive: number;
        timeout: number;
    }): Promise<void>;
    reconnect(): Promise<void>;
    disconnect(): Promise<void>;
    writeToSocket(message: Buffer, logMessage?: string): Promise<void>;
    connectAndBindSocketEvents({ keepAlive, timeout }: ConnectOptions): Promise<void>;
}
