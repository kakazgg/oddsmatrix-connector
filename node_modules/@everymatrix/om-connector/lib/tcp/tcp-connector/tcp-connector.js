"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var net_1 = require("net");
var log_1 = require("../../core/log");
var tcp_emitter_1 = require("../tcp-emitter/tcp-emitter");
var sports_engine_parser_1 = require("../sports-engine-parser/sports-engine-parser");
var tcp_messages_1 = require("../tcp-messages");
var eventNames_1 = require("../../constants/eventNames");
var defaults_1 = require("../../constants/defaults");
var utils_1 = require("../../utils");
var TCPConnector = (function () {
    function TCPConnector(host, port, subscriptionSpecificationName, getLastAppliedEntityChangeBatchUuid) {
        this.state = {
            connected: false,
            connecting: false,
        };
        this.reconnectAttempt = 0;
        this.host = host;
        this.port = port;
        this.subscriptionSpecificationName = subscriptionSpecificationName;
        this.getLastAppliedEntityChangeBatchUuid = getLastAppliedEntityChangeBatchUuid;
    }
    TCPConnector.prototype.connect = function (sendSubscriptionProbe, options) {
        if (sendSubscriptionProbe === void 0) { sendSubscriptionProbe = true; }
        if (options === void 0) { options = {
            keepAlive: defaults_1.SOCKET_KEEP_ALIVE,
            timeout: defaults_1.SOCKET_TIMEOUT,
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, connected, connecting, subscriptionProbe, e_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.state, connected = _a.connected, connecting = _a.connecting;
                        if (connected || connecting) {
                            return [2];
                        }
                        this.client = new net_1.Socket();
                        return [4, this.connectAndBindSocketEvents(options)];
                    case 1:
                        _b.sent();
                        if (!sendSubscriptionProbe) return [3, 6];
                        return [4, tcp_messages_1.getSubscriptionMessage(this.subscriptionSpecificationName)];
                    case 2:
                        subscriptionProbe = _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4, this.writeToSocket(subscriptionProbe, "Subscription probe sent")];
                    case 4:
                        _b.sent();
                        return [3, 6];
                    case 5:
                        e_1 = _b.sent();
                        tcp_emitter_1.tcpEmitter.emit(eventNames_1.CommonEvents.runtimeError, e_1);
                        return [3, 6];
                    case 6:
                        tcp_emitter_1.tcpEmitter.on(eventNames_1.TCPEvents.subscribe, function (subscribeData) {
                            var _a = subscribeData.SubscribeResponse, subscriptionChecksum = _a.subscriptionChecksum, subscriptionId = _a.subscriptionId;
                            _this.subscriptionId = subscriptionId;
                            _this.subscriptionChecksum = subscriptionChecksum;
                        });
                        tcp_emitter_1.tcpEmitter.on(eventNames_1.TCPEvents.ping, function (pingId) { return __awaiter(_this, void 0, void 0, function () {
                            var pingProbe, e_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, tcp_messages_1.getPingResponse(pingId)];
                                    case 1:
                                        pingProbe = _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        _a.trys.push([2, 4, , 5]);
                                        return [4, this.writeToSocket(pingProbe, "Ping probe sent: " + pingId)];
                                    case 3:
                                        _a.sent();
                                        return [3, 5];
                                    case 4:
                                        e_2 = _a.sent();
                                        tcp_emitter_1.tcpEmitter.emit(eventNames_1.CommonEvents.runtimeError, e_2);
                                        return [3, 5];
                                    case 5: return [2];
                                }
                            });
                        }); });
                        tcp_emitter_1.tcpEmitter.on(eventNames_1.TCPEvents.tcpError, function (errorCode) {
                            if (errorCode === '400' || errorCode === '1000') {
                                _this.disconnect();
                                _this.connect();
                            }
                        });
                        return [2];
                }
            });
        });
    };
    TCPConnector.prototype.reconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var lastBatchUuid, reconnectProbe, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lastBatchUuid = this.getLastAppliedEntityChangeBatchUuid();
                        this.reconnectAttempt += 1;
                        log_1.default("Reconnect attempt " + this.reconnectAttempt);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        return [4, this.disconnect()];
                    case 2:
                        _a.sent();
                        return [4, this.connect(false)];
                    case 3:
                        _a.sent();
                        return [4, tcp_messages_1.getUpdateDataResumeRequest(this.subscriptionId, this.subscriptionSpecificationName, this.subscriptionChecksum, lastBatchUuid)];
                    case 4:
                        reconnectProbe = _a.sent();
                        return [4, this.writeToSocket(reconnectProbe)];
                    case 5:
                        _a.sent();
                        return [3, 7];
                    case 6:
                        e_3 = _a.sent();
                        tcp_emitter_1.tcpEmitter.emit(eventNames_1.CommonEvents.runtimeError, e_3);
                        return [3, 7];
                    case 7: return [2];
                }
            });
        });
    };
    TCPConnector.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var unsubscribeRequest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.state.connecting = false;
                        this.state.connected = false;
                        if (!(this.client && !this.client.destroyed)) return [3, 3];
                        return [4, tcp_messages_1.getUnsubscribeRequest(this.subscriptionId, this.subscriptionSpecificationName)];
                    case 1:
                        unsubscribeRequest = _a.sent();
                        return [4, this.writeToSocket(unsubscribeRequest, 'Unsubscribe probe sent')];
                    case 2:
                        _a.sent();
                        this.client.destroy();
                        this.client.removeAllListeners();
                        _a.label = 3;
                    case 3:
                        this.client = null;
                        return [2];
                }
            });
        });
    };
    TCPConnector.prototype.writeToSocket = function (message, logMessage) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var gzippedMsgLength = message.length.toString();
            var zeroByte = Buffer.alloc(1);
            if (!_this.client) {
                return;
            }
            _this.client.write(gzippedMsgLength, utils_1.wrapErrorCallback(resolve, reject));
            _this.client.write(zeroByte, utils_1.wrapErrorCallback(resolve, reject));
            _this.client.write(message, 'utf8', utils_1.wrapErrorCallback(resolve, reject));
            log_1.default(logMessage);
        });
    };
    TCPConnector.prototype.connectAndBindSocketEvents = function (_a) {
        var _this = this;
        var keepAlive = _a.keepAlive, timeout = _a.timeout;
        var _b = this, client = _b.client, host = _b.host, port = _b.port;
        return new Promise(function (resolve, reject) {
            if (!client) {
                reject();
                return;
            }
            client.on('connect', function () {
                _this.state.connecting = false;
                _this.reconnectAttempt = 0;
                resolve();
            });
            client.on('ready', function () {
                _this.state.connected = true;
            });
            client.on('data', function (data) {
                sports_engine_parser_1.default.parse(data);
            });
            client.on('end', function () {
                log_1.default('End');
            });
            client.on('error', function (e) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    setTimeout(function () {
                        _this.reconnect();
                    }, defaults_1.TCP_RECONNECT_INTERVAL);
                    reject(e);
                    return [2];
                });
            }); });
            client.on('timeout', function () { return __awaiter(_this, void 0, void 0, function () {
                var e_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.reconnect()];
                        case 1:
                            _a.sent();
                            return [3, 3];
                        case 2:
                            e_4 = _a.sent();
                            tcp_emitter_1.tcpEmitter.emit(eventNames_1.CommonEvents.runtimeError, e_4);
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            }); });
            _this.state.connecting = true;
            client
                .setTimeout(timeout)
                .setKeepAlive(true, keepAlive)
                .connect({
                port: +port,
                host: host,
            });
        });
    };
    return TCPConnector;
}());
exports.default = TCPConnector;
